# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          # - {os: macos-10.15, r: 'release'}
          #- {os: ubuntu-16.04,   r: '4.0.3',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          # - {os: ubuntu-18.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - name: Codecov
        uses: codecov/codecov-action@v1.2.1


      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libnetcdf-dev libnetcdff-dev
          sudo apt-get install libgfortran3
          sudo apt-get install libc6
          sudo apt-get install libxml2-dev
          sudo apt-get install kst
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04"))')

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install netcdf

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("xtable")
          remotes::install_cran("gstat")
          remotes::install_github("GLEON/rLakeAnalyzer")
          remotes::install_github("aemon-j/GLM3r", ref = "v3.1.1")
          remotes::install_github("aemon-j/FLakeR", ref = "inflow")
          remotes::install_github("aemon-j/GOTMr")
          remotes::install_github("aemon-j/SimstratR")
          remotes::install_github("aemon-j/gotmtools")
          remotes::install_github("aemon-j/MyLakeR")
          remotes::install_github("USGS-R/glmtools", ref = "ggplot_overhaul")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--no-build-vignettes"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
